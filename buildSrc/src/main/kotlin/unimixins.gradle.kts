import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("java")
    id("xyz.wagyourtail.unimined")
    id("com.palantir.git-version")
    id("com.gradleup.shadow")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    // TODO only include IFMLLoadingPlugin, Mod and ComparableVersion
    compileOnly("net.minecraftforge:forge:1.12.2-14.23.5.2860:universal")
}

// Forge properties
val minecraft_version = "1.7.10"
val forge_version = "10.13.4.1614-1.7.10"

fun getVersion(): String {
    val override = System.getenv("VERSION")
    if (override != null) {
        print("VERSION set! Overriding version to $override")
        return override
    }

    val versionDetails: groovy.lang.Closure<com.palantir.gradle.gitversion.VersionDetails> by extra
    // If it exists, grab the last tag. Otherwise it is UNKNOWN
    val details = versionDetails()
    var ret = details.lastTag
    if (details.commitDistance > 0) ret += "-${details.commitDistance}-${details.gitHash}"
    if (!details.isCleanTag) ret += "-dirty"

    return ret
}

version = getVersion()
base.archivesName = "+unimixins${ if (project.name == "all") "" else "-${project.name}" }-1.7.10"

val generated by sourceSets.creating
val genDir = layout.buildDirectory.file("genResources")
generated.resources.srcDir(genDir)

val generateEmbeddedCorePluginFile by tasks.registering {
    if (ext.has("FMLCorePlugin")) {
        val corePlugin = ext.get("FMLCorePlugin") as String
        val dir = File(genDir.get().asFile, "META-INF")
        dir.mkdirs()

        val embeddedCorePluginFile =
            File(dir, "EmbeddedFMLCorePlugins.txt")
        embeddedCorePluginFile.writeText(corePlugin)
    }
}

tasks.processResources {
    dependsOn(generateEmbeddedCorePluginFile)

    files("mcmod.info") {
        filter<ReplaceTokens>("tokens" to mapOf(
            "minecraftVersion" to minecraft_version,
            "uniMixinsVersion" to version.toString(),
            "projectUrl" to "https://github.com/LegacyModdingMC/UniMixins"
        ))
    }
}

tasks.named<ShadowJar>("shadowJar") {
    from(generated.resources)

    if (ext.has("FMLCorePlugin")) {
        manifest {
            "FMLCorePlugin" to ext.get("FMLCorePlugin")
        }
    }
}

unimined.minecraft(sourceSets.main.get(), true) {
    version = minecraft_version

    mappings {
        searge()
        mcp("stable", "12-1.7.10")
    }

    minecraftForge {
        loader(forge_version)
    }
}